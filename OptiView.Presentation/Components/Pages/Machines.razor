@page "/machines"
@rendermode InteractiveServer
@using Microsoft.AspNetCore.Components
@using OptiView.Application.DTOs
@using OptiView.Domain.Entities
@using OptiView.Domain.Interfaces
@using Microsoft.AspNetCore.Components.Forms
@using OptiView.Presentation.Components.Dialogs
@inject IMachineService MachineService
@inject IJSRuntime JSRuntime

<div class="machines-container">
    <div class="header-container">
        <div class="header-left">
            <h1 class="title">Machine List</h1>
            <button class="add-machine-btn" @onclick="OpenAddMachineDialog">
                Add Machine
            </button>
        </div>
        <div class="stats-grid">
            <div class="stat-card total">
                <i class="fas fa-microchip stat-icon"></i>
                <div class="stat-info">
                    <span class="stat-label">Total Machines</span>
                    <span class="stat-value">@(machines?.Count ?? 0)</span>
                </div>
            </div>
            <div class="stat-card online">
                <i class="fas fa-check-circle stat-icon"></i>
                <div class="stat-info">
                    <span class="stat-label">Online</span>
                    <span class="stat-value">@(machines?.Count(m => m.Status == MachineStatus.Online) ?? 0)</span>
                    <span class="stat-percentage">
                        (@GetPercentage(m => m.Status == MachineStatus.Online)%)
                    </span>
                </div>
            </div>
            <div class="stat-card offline">
                <i class="fas fa-times-circle stat-icon"></i>
                <div class="stat-info">
                    <span class="stat-label">Offline</span>
                    <span class="stat-value">@(machines?.Count(m => m.Status == MachineStatus.Offline) ?? 0)</span>
                    <span class="stat-percentage">
                        (@GetPercentage(m => m.Status == MachineStatus.Offline)%)
                    </span>
                </div>
            </div>
            <div class="stat-card maintenance">
                <i class="fas fa-tools stat-icon"></i>
                <div class="stat-info">
                    <span class="stat-label">In Maintenance</span>
                    <span class="stat-value">@(machines?.Count(m => m.Status == MachineStatus.Maintenance) ?? 0)</span>
                    <span class="stat-percentage">
                        (@GetPercentage(m => m.Status == MachineStatus.Maintenance)%)
                    </span>
                </div>
            </div>
        </div>
    </div>
    @if (machines == null)
    {
        <div class="loading-container">
            <div class="loader"></div>
            <p>Loading machines...</p>
        </div>
    }
    else
    {
        <div class="machine-grid">
            @foreach (var machine in machines)
            {
                <div class="machine-card @GetStatusClass(machine.Status)">
                    <div class="card-header">
                        <h3 class="machine-name">@machine.Name</h3>
                        <div class="status-badge @machine.StatusColor">
                            @machine.StatusDisplay
                        </div>
                    </div>
                    <div class="card-content">
                        <div class="info-row horizontal">
                            <span class="label">Last Updated:</span>
                            <span class="value">@machine.LastUpdatedDisplay</span>
                        </div>
                        @if (!string.IsNullOrEmpty(machine.Description))
                        {
                            <div class="info-row">
                                <span class="label">Description:</span>
                                <span class="value">@machine.Description</span>
                            </div>
                        }
                    </div>
                    <div class="card-actions">
                        <div class="send-data-container">
                            <div class="data-preview">
                                <div class="data-row">
                                    <span class="data-label">Temperature:</span>
                                    <span class="data-value">@GetRandomTemp()°C</span>
                                </div>
                                <div class="data-row">
                                    <span class="data-label">Pressure:</span>
                                    <span class="data-value">@GetRandomPressure() Bar</span>
                                </div>
                                <div class="data-row">
                                    <span class="data-label">Speed:</span>
                                    <span class="data-value">@GetRandomSpeed() RPM</span>
                                </div>
                                <div class="data-row">
                                    <span class="data-label">Power:</span>
                                    <span class="data-value">@GetRandomPower() kW</span>
                                </div>
                            </div>
                            <button class="action-button send-data @(isSending.Contains(machine.Id) ? "sending" : "")" 
                                    @onclick="() => SendDataToMachine(machine.Id)"
                                    disabled="@isSending.Contains(machine.Id)">
                                <div class="button-content">
                                    @if (isSending.Contains(machine.Id))
                                    {
                                        <div class="sending-animation">
                                            <span class="dot"></span>
                                            <span class="dot"></span>
                                            <span class="dot"></span>
                                        </div>
                                        <span>Sending...</span>
                                    }
                                    else
                                    {
                                        <i class="fas fa-paper-plane"></i>
                                        <span>Send Telemetry Data</span>
                                    }
                                </div>
                            </button>
                            @if (lastSentTime.ContainsKey(machine.Id))
                            {
                                <div class="last-sent">
                                    Last telemetry: @lastSentTime[machine.Id].ToString("HH:mm:ss")
                                </div>
                            }
                        </div>
                        <button class="action-button delete" @onclick="() => DeleteMachine(machine.Id)">
                            Delete
                        </button>
                        <button class="action-button toggle-status @GetButtonClass(machine.Status)"
                                @onclick="() => UpdateMachineStatus(machine.Id, GetNextStatus(machine.Status))">
                            <span class="button-content">
                                <span class="current-status">@machine.Status</span>
                                <span class="status-arrow">→</span>
                                <span class="next-status">@GetNextStatus(machine.Status)</span>
                            </span>
                        </button>
                    </div>
                </div>
            }
        </div>
    }
    @if (showAddDialog)
    {
        <AddMachineDialog 
            MachineDto="newMachine"
            OnCancel="CloseDialog"
            OnSubmit="@(machine => HandleValidSubmit(machine))"
        />
    }
</div>
<style>
    .machines-container {
        padding: 2rem;
        max-width: 1400px;
        margin: 0 auto;
    }
    .header-container {
        display: flex;
        flex-direction: column;
        gap: 2rem;
        align-items: center;
        margin-bottom: 2rem;
        width: 100%;
    }
    .header-left {
        display: flex;
        width: 100%;
        align-items: center;
        justify-content: space-between;
    }
    .title {
        font-size: 2rem;
        font-weight: 600;
        color: #1a1f2c;
        margin: 0;
    }
    .add-machine-btn {
        height: 48px;
        padding: 0 2rem;
        background: #9b87f5;
        color: white;
        border: none;
        border-radius: 8px;
        font-weight: 500;
        cursor: pointer;
        display: inline-flex;
        align-items: center;
        justify-content: center;
        font-size: 0.9rem;
        transition: all 0.2s ease;
    }
    .add-machine-btn:hover {
        background: #8b77e5;
    }
    .stats-grid {
        display: grid;
        grid-template-columns: repeat(4, 1fr);
        gap: 1rem;
        width: 100%;
    }
    .stat-card {
        background: white;
        padding: 0.75rem 1.5rem;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        display: flex;
        align-items: center;
        gap: 1rem;
        transition: transform 0.2s;
    }
    .stat-card:hover {
        transform: translateY(-2px);
    }
    .stat-icon {
        font-size: 1.5rem;
        padding: 1rem;
        border-radius: 50%;
        background: rgba(155, 135, 245, 0.1);
    }
    .stat-info {
        flex: 1;
    }
    .stat-label {
        display: block;
        font-size: 0.875rem;
        color: #666;
        margin-bottom: 0.25rem;
    }
    .stat-value {
        display: block;
        font-size: 1.5rem;
        font-weight: 600;
        color: #1a1f2c;
    }
    .stat-percentage {
        font-size: 0.875rem;
        color: #666;
        margin-left: 0.5rem;
    }
    .stat-card.online .stat-icon {
        color: #16a34a;
        background: rgba(22, 163, 74, 0.1);
    }
    .stat-card.offline .stat-icon {
        color: #dc2626;
        background: rgba(220, 38, 38, 0.1);
    }
    .stat-card.maintenance .stat-icon {
        color: #d97706;
        background: rgba(217, 119, 6, 0.1);
    }
    .machine-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
        gap: 1.5rem;
    }
    .machine-card {
        background: white;
        border-radius: 12px;
        box-shadow: 0 4px 6px rgba(0,0,0,0.1);
        transition: transform 0.2s, box-shadow 0.2s;
        overflow: hidden;
        display: flex;
        flex-direction: column;
        height: 100%;
    }
    .machine-card:hover {
        transform: translateY(-2px);
        box-shadow: 0 6px 12px rgba(0,0,0,0.15);
    }
    .card-header {
        padding: 1.25rem;
        display: flex;
        justify-content: space-between;
        align-items: center;
        border-bottom: 1px solid #eee;
    }
    .machine-name {
        margin: 0;
        font-size: 1.25rem;
        font-weight: 600;
        color: #1a1f2c;
    }
    .status-badge {
        padding: 0.5rem 1rem;
        border-radius: 20px;
        font-size: 0.875rem;
        font-weight: 500;
    }
    .status-badge.online {
        background: #dcfce7;
        color: #22c55e;
    }
    .status-badge.offline {
        background: #fee2e2;
        color: #dc2626;
    }
    .status-badge.maintenance {
        background: #f3e8ff;
        color: #9b87f5;
    }
    .card-content {
        padding: 1.25rem;
        flex: 1;
        display: flex;
        flex-direction: column;
        gap: 1rem;
    }
    .info-row {
        display: flex;
        flex-direction: column;
        margin-bottom: 0.75rem;
    }
    .info-row.horizontal {
        flex-direction: row;
        justify-content: space-between;
        align-items: center;
    }
    .label {
        color: #666;
        font-size: 0.875rem;
        font-weight: 500;
    }
    .value {
        color: #1a1f2c;
        line-height: 1.5;
        word-wrap: break-word;
    }
    .card-actions {
        padding: 1.25rem;
        background: #f8f9fa;
        border-top: 1px solid #eee;
        display: flex;
        flex-direction: column;
        gap: 0.5rem;
    }
    .action-button {
        width: 100%;
        padding: 0.75rem;
        border: none;
        border-radius: 6px;
        font-weight: 500;
        cursor: pointer;
        transition: background-color 0.2s;
        margin-bottom: 0.5rem;
    }
    .action-button.online {
        background: #22c55e;
        color: white;
    }
    .action-button.offline {
        background: #dc2626;
        color: white;
    }
    .action-button.maintenance {
        background: #9b87f5;
        color: white;
    }
    .action-button:hover {
        filter: brightness(110%);
    }
    .button-content {
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 0.5rem;
    }
    .loading-container {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        padding: 3rem;
    }
    .loader {
        border: 3px solid #f3f3f3;
        border-radius: 50%;
        border-top: 3px solid #9b87f5;
        width: 40px;
        height: 40px;
        animation: spin 1s linear infinite;
        margin-bottom: 1rem;
    }
    @@keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }
    @@media (max-width: 1200px) {
        .stats-grid {
            grid-template-columns: repeat(2, 1fr);
            gap: 1rem;
        }
    }
    @@media (max-width: 768px) {
        .machines-container {
            padding: 1rem;
        }
        .header-left {
            flex-direction: column;
            gap: 1rem;
            align-items: stretch;
        }
        .title {
            text-align: center;
            font-size: 1.75rem;
        }
        .add-machine-btn {
            width: 100%;
        }
        .stats-grid {
            grid-template-columns: 1fr;
            gap: 1rem;
        }
        .machine-grid {
            grid-template-columns: 1fr;
        }
        .stat-card {
            padding: 1rem;
        }
        .stat-icon {
            padding: 0.75rem;
            font-size: 1.25rem;
        }
        .stat-value {
            font-size: 1.25rem;
        }
    }
    @@media (max-width: 480px) {
        .machines-container {
            padding: 0.5rem;
        }
        .card-content {
            padding: 1rem;
        }
        .card-actions {
            padding: 1rem;
        }
        .machine-name {
            font-size: 1.1rem;
        }
        .status-badge {
            padding: 0.35rem 0.75rem;
            font-size: 0.8rem;
        }
    }
    .dialog-overlay {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: rgba(0, 0, 0, 0.5);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 1000;
    }
    .dialog {
        background: white;
        padding: 2rem;
        border-radius: 8px;
        min-width: 400px;
    }
    .form-group {
        margin-bottom: 1rem;
    }
    .form-control {
        width: 100%;
        padding: 0.5rem;
        border: 1px solid #ddd;
        border-radius: 4px;
    }
    .dialog-buttons {
        margin-top: 1.5rem;
        display: flex;
        gap: 1rem;
        justify-content: flex-end;
    }
    .btn {
        padding: 0.5rem 1rem;
        border-radius: 4px;
        border: none;
        cursor: pointer;
    }
    .btn-primary {
        background: #9b87f5;
        color: white;
    }
    .btn-secondary {
        background: #6c757d;
        color: white;
    }
    .action-button.delete {
        background-color: #ef4444;
        color: white;
    }
    .toggle-status {
        position: relative;
        overflow: hidden;
        transition: all 0.3s ease;
    }
    .toggle-status:hover {
        transform: translateY(-2px);
    }
    .button-content {
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 0.75rem;
    }
    .status-arrow {
        font-size: 1.2rem;
        opacity: 0.7;
    }
    .next-status {
        font-size: 0.9rem;
        opacity: 0.8;
    }
    .current-status {
        font-weight: 600;
    }
    .send-data-container {
        display: flex;
        flex-direction: column;
        gap: 0.5rem;
    }
    .send-data {
        background: linear-gradient(135deg, #3b82f6 0%, #2563eb 100%);
        position: relative;
        overflow: hidden;
        transition: transform 0.2s ease, box-shadow 0.2s ease;
    }
    .send-data:not(.sending):hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 12px rgba(59, 130, 246, 0.3);
        filter: brightness(110%);
    }
    .send-data.sending {
        background: #4b5563;
        cursor: not-allowed;
    }
    .sending-animation {
        display: flex;
        align-items: center;
        gap: 0.25rem;
    }
    .dot {
        width: 4px;
        height: 4px;
        background: white;
        border-radius: 50%;
        animation: bounce 1.4s infinite ease-in-out;
    }
    .dot:nth-child(1) { animation-delay: -0.32s; }
    .dot:nth-child(2) { animation-delay: -0.16s; }
    .last-sent {
        font-size: 0.75rem;
        color: #6b7280;
        text-align: center;
        font-style: italic;
    }
    @@keyframes bounce {
        0%, 80%, 100% { transform: scale(0); }
        40% { transform: scale(1); }
    }
    .data-preview {
        background: rgba(59, 130, 246, 0.05);
        border-radius: 6px;
        padding: 0.75rem;
        margin-bottom: 0.5rem;
    }
    .data-row {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 0.25rem 0;
        font-size: 0.875rem;
    }
    .data-label {
        color: #6b7280;
    }
    .data-value {
        font-family: monospace;
        color: #1a1f2c;
        font-weight: 500;
    }
</style>
@code {
    private List<MachineDto> machines = new();
    private bool showAddDialog = false;
    private MachineDto newMachine = new();
    private HashSet<string> isSending = new();
    private Dictionary<string, DateTime> lastSentTime = new();
    private Random random = new Random();

    protected override async Task OnInitializedAsync()
    {
        var machineEntities = await MachineService.GetAllMachinesAsync();
        machines = machineEntities.Select(machine => new MachineDto
            {
                Id = machine.Id,
                Name = machine.Name,
                Status = machine.Status,
                LastUpdated = machine.LastUpdated,
                Description = machine.Description
            }).ToList();
    }
    private async Task UpdateMachineStatus(string machineId, MachineStatus newStatus)
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Attempting to update status for machine {machineId}");
            await MachineService.UpdateMachineStatusAsync(machineId, newStatus);
            await OnInitializedAsync();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error: {ex.Message}");
        }
    }
    private MachineStatus GetNextStatus(MachineStatus currentStatus)
    {
        return currentStatus switch
        {
            MachineStatus.Online => MachineStatus.Offline,
            MachineStatus.Offline => MachineStatus.Maintenance,
            MachineStatus.Maintenance => MachineStatus.Online,
            _ => MachineStatus.Offline
        };
    }
    private string GetStatusClass(MachineStatus status)
    {
        return status switch
        {
            MachineStatus.Online => "status-online",
            MachineStatus.Offline => "status-offline",
            MachineStatus.Maintenance => "status-maintenance",
            _ => "status-offline"
        };
    }
    private string GetButtonClass(MachineStatus status)
    {
        return status switch
        {
            MachineStatus.Online => "online",
            MachineStatus.Offline => "offline",
            MachineStatus.Maintenance => "maintenance",
            _ => "offline"
        };
    }
    private string GetRandomTemp() => random.Next(35, 85).ToString();
    private string GetRandomPressure() => (random.NextDouble() * 10 + 2).ToString("F1");
    private string GetRandomSpeed() => (random.Next(1000, 3000)).ToString();
    private string GetRandomPower() => (random.NextDouble() * 100 + 50).ToString("F1");
    private async Task SendDataToMachine(string machineId)
    {
        try
        {
            isSending.Add(machineId);
            StateHasChanged();

            var machineData = new MachineDataDto
            {
                Temperature = double.Parse(GetRandomTemp()),
                Pressure = double.Parse(GetRandomPressure()),
                Speed = double.Parse(GetRandomSpeed()),
                PowerUsage = double.Parse(GetRandomPower()),
                ProductionCount = random.Next(100, 1000),
                Timestamp = DateTime.Now
            };

            await Task.Delay(2000); // Simulera nätverksfördröjning
            await MachineService.SendDataToMachineAsync(machineId, machineData);
            lastSentTime[machineId] = DateTime.Now;
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error sending telemetry: {ex.Message}");
        }
        finally
        {
            isSending.Remove(machineId);
            StateHasChanged();
        }
    }
    private async Task DeleteMachine(string machineId)
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Attempting to delete machine {machineId}");
            await MachineService.DeleteMachineAsync(machineId);
            await OnInitializedAsync();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error: {ex.Message}");
        }
    }
    private void OpenAddMachineDialog()
    {
        showAddDialog = true;
        newMachine = new MachineDto
        {
            Id = Guid.NewGuid().ToString(),
            Status = MachineStatus.Offline,
            LastUpdated = DateTime.UtcNow
        };
    }
    private void CloseDialog()
    {
        showAddDialog = false;
    }
    private async Task HandleValidSubmit(MachineDto machineDto)
    {
        var machine = new Machine
        {
            Id = machineDto.Id,
            Name = machineDto.Name,
            Status = machineDto.Status,
            LastUpdated = machineDto.LastUpdated,
            Description = machineDto.Description
        };
        await MachineService.AddMachineAsync(machine);
        await OnInitializedAsync();
        showAddDialog = false;
    }
    private async Task AddNewMachine()
    {
        var newMachine = new MachineDto
        {
            Id = Guid.NewGuid().ToString(),
            Name = "New Machine",
            Status = MachineStatus.Offline,
            LastUpdated = DateTime.UtcNow
        };
        
        await MachineService.AddMachineAsync(new Machine
        {
            Id = newMachine.Id,
            Name = newMachine.Name,
            Status = newMachine.Status,
            LastUpdated = newMachine.LastUpdated
        });
        
        await OnInitializedAsync();
    }
    private string GetPercentage(Func<MachineDto, bool> predicate)
    {
        if (machines == null || !machines.Any())
            return "0";
        
        return Math.Round((double)machines.Count(predicate) / machines.Count * 100, 1).ToString("0.#");
    }
}