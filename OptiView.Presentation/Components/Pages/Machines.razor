@page "/machines"
@rendermode InteractiveServer
@using Microsoft.AspNetCore.Components
@using OptiView.Application.DTOs
@using OptiView.Domain.Entities
@using OptiView.Domain.Interfaces
@using Microsoft.AspNetCore.Components.Forms
@using OptiView.Presentation.Components.Dialogs
@inject IMachineService MachineService
@inject IJSRuntime JSRuntime

<div class="machines-container">
    <div class="header-container">
        <div class="header-left">
            <h1 class="title">Machine List</h1>
            <button class="add-machine-btn" @onclick="OpenAddMachineDialog">
                Add Machine
            </button>
        </div>
        <div class="stats-grid">
            <div class="stat-card total">
                <i class="fas fa-microchip stat-icon"></i>
                <div class="stat-info">
                    <span class="stat-label">Total Machines</span>
                    <span class="stat-value">@(machines?.Count ?? 0)</span>
                </div>
            </div>
            <div class="stat-card online">
                <i class="fas fa-check-circle stat-icon"></i>
                <div class="stat-info">
                    <span class="stat-label">Online</span>
                    <span class="stat-value">@(machines?.Count(m => m.Status == MachineStatus.Online) ?? 0)</span>
                    <span class="stat-percentage">
                        (@GetPercentage(m => m.Status == MachineStatus.Online)%)
                    </span>
                </div>
            </div>
            <div class="stat-card offline">
                <i class="fas fa-times-circle stat-icon"></i>
                <div class="stat-info">
                    <span class="stat-label">Offline</span>
                    <span class="stat-value">@(machines?.Count(m => m.Status == MachineStatus.Offline) ?? 0)</span>
                    <span class="stat-percentage">
                        (@GetPercentage(m => m.Status == MachineStatus.Offline)%)
                    </span>
                </div>
            </div>
            <div class="stat-card maintenance">
                <i class="fas fa-tools stat-icon"></i>
                <div class="stat-info">
                    <span class="stat-label">In Maintenance</span>
                    <span class="stat-value">@(machines?.Count(m => m.Status == MachineStatus.Maintenance) ?? 0)</span>
                    <span class="stat-percentage">
                        (@GetPercentage(m => m.Status == MachineStatus.Maintenance)%)
                    </span>
                </div>
            </div>
        </div>
    </div>
    @if (machines == null)
    {
        <div class="loading-container">
            <div class="loader"></div>
            <p>Loading machines...</p>
        </div>
    }
    else
    {
        <div class="machine-grid">
            @foreach (var machine in machines)
            {
                <div class="machine-card @GetStatusClass(machine.Status)">
                    <div class="card-header">
                        <h3 class="machine-name">@machine.Name</h3>
                        <div class="status-badge @machine.StatusColor">
                            @machine.StatusDisplay
                        </div>
                    </div>
                    <div class="card-content">
                        <div class="info-row horizontal">
                            <span class="label">Last Updated:</span>
                            <span class="value">@machine.LastUpdatedDisplay</span>
                        </div>
                        @if (!string.IsNullOrEmpty(machine.Description))
                        {
                            <div class="info-row">
                                <span class="label">Description:</span>
                                <span class="value">@machine.Description</span>
                            </div>
                        }
                    </div>
                    <div class="card-actions">
                        <div class="send-data-container">
                            <div class="data-preview">
                                <div class="data-row">
                                    <span class="data-label">Temperature:</span>
                                    <span class="data-value">@GetRandomTemp()°C</span>
                                </div>
                                <div class="data-row">
                                    <span class="data-label">Pressure:</span>
                                    <span class="data-value">@GetRandomPressure() Bar</span>
                                </div>
                                <div class="data-row">
                                    <span class="data-label">Speed:</span>
                                    <span class="data-value">@GetRandomSpeed() RPM</span>
                                </div>
                                <div class="data-row">
                                    <span class="data-label">Power:</span>
                                    <span class="data-value">@GetRandomPower() kW</span>
                                </div>
                            </div>
                            <button class="action-button send-data @(isSending.Contains(machine.Id) ? "sending" : "")" 
                                    @onclick="() => SendDataToMachine(machine.Id)"
                                    disabled="@isSending.Contains(machine.Id)">
                                <div class="button-content">
                                    @if (isSending.Contains(machine.Id))
                                    {
                                        <div class="sending-animation">
                                            <span class="dot"></span>
                                            <span class="dot"></span>
                                            <span class="dot"></span>
                                        </div>
                                        <span>Sending...</span>
                                    }
                                    else
                                    {
                                        <i class="fas fa-paper-plane"></i>
                                        <span>Send Telemetry Data</span>
                                    }
                                </div>
                            </button>
                            @if (lastSentTime.ContainsKey(machine.Id))
                            {
                                <div class="last-sent">
                                    Last telemetry: @lastSentTime[machine.Id].ToString("HH:mm:ss")
                                </div>
                            }
                        </div>
                        <button class="action-button delete" @onclick="() => DeleteMachine(machine.Id)">
                            Delete
                        </button>
                        <button class="action-button toggle-status @GetButtonClass(machine.Status)"
                                @onclick="() => UpdateMachineStatus(machine.Id, GetNextStatus(machine.Status))">
                            <span class="button-content">
                                <span class="current-status">@machine.Status</span>
                                <span class="status-arrow">→</span>
                                <span class="next-status">@GetNextStatus(machine.Status)</span>
                            </span>
                        </button>
                    </div>
                </div>
            }
        </div>
    }
    @if (showAddDialog)
    {
        <AddMachineDialog 
            MachineDto="newMachine"
            OnCancel="CloseDialog"
            OnSubmit="@(machine => HandleValidSubmit(machine))"
        />
    }
</div>
@code {
    private List<MachineDto> machines = new();
    private bool showAddDialog = false;
    private MachineDto newMachine = new();
    private HashSet<string> isSending = new();
    private Dictionary<string, DateTime> lastSentTime = new();
    private Random random = new Random();

    protected override async Task OnInitializedAsync()
    {
        var machineEntities = await MachineService.GetAllMachinesAsync();
        machines = machineEntities.Select(machine => new MachineDto
            {
                Id = machine.Id,
                Name = machine.Name,
                Status = machine.Status,
                LastUpdated = machine.LastUpdated,
                Description = machine.Description
            }).ToList();
    }
    private async Task UpdateMachineStatus(string machineId, MachineStatus newStatus)
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Attempting to update status for machine {machineId}");
            await MachineService.UpdateMachineStatusAsync(machineId, newStatus);
            await OnInitializedAsync();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error: {ex.Message}");
        }
    }
    private MachineStatus GetNextStatus(MachineStatus currentStatus)
    {
        return currentStatus switch
        {
            MachineStatus.Online => MachineStatus.Offline,
            MachineStatus.Offline => MachineStatus.Maintenance,
            MachineStatus.Maintenance => MachineStatus.Online,
            _ => MachineStatus.Offline
        };
    }
    private string GetStatusClass(MachineStatus status)
    {
        return status switch
        {
            MachineStatus.Online => "status-online",
            MachineStatus.Offline => "status-offline",
            MachineStatus.Maintenance => "status-maintenance",
            _ => "status-offline"
        };
    }
    private string GetButtonClass(MachineStatus status)
    {
        return status switch
        {
            MachineStatus.Online => "online",
            MachineStatus.Offline => "offline",
            MachineStatus.Maintenance => "maintenance",
            _ => "offline"
        };
    }
    private string GetRandomTemp() => random.Next(35, 85).ToString();
    private string GetRandomPressure() => (random.NextDouble() * 10 + 2).ToString("F1");
    private string GetRandomSpeed() => (random.Next(1000, 3000)).ToString();
    private string GetRandomPower() => (random.NextDouble() * 100 + 50).ToString("F1");
    private async Task SendDataToMachine(string machineId)
    {
        try
        {
            isSending.Add(machineId);
            StateHasChanged();

            var machineData = new MachineDataDto
            {
                Temperature = double.Parse(GetRandomTemp()),
                Pressure = double.Parse(GetRandomPressure()),
                Speed = double.Parse(GetRandomSpeed()),
                PowerUsage = double.Parse(GetRandomPower()),
                ProductionCount = random.Next(100, 1000),
                Timestamp = DateTime.Now
            };

            await Task.Delay(2000); // Simulera nätverksfördröjning
            await MachineService.SendDataToMachineAsync(machineId, machineData);
            lastSentTime[machineId] = DateTime.Now;
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error sending telemetry: {ex.Message}");
        }
        finally
        {
            isSending.Remove(machineId);
            StateHasChanged();
        }
    }
    private async Task DeleteMachine(string machineId)
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Attempting to delete machine {machineId}");
            await MachineService.DeleteMachineAsync(machineId);
            await OnInitializedAsync();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error: {ex.Message}");
        }
    }
    private void OpenAddMachineDialog()
    {
        showAddDialog = true;
        newMachine = new MachineDto
        {
            Id = Guid.NewGuid().ToString(),
            Status = MachineStatus.Offline,
            LastUpdated = DateTime.UtcNow
        };
    }
    private void CloseDialog()
    {
        showAddDialog = false;
    }
    private async Task HandleValidSubmit(MachineDto machineDto)
    {
        var machine = new Machine
        {
            Id = machineDto.Id,
            Name = machineDto.Name,
            Status = machineDto.Status,
            LastUpdated = machineDto.LastUpdated,
            Description = machineDto.Description
        };
        await MachineService.AddMachineAsync(machine);
        await OnInitializedAsync();
        showAddDialog = false;
    }
    private async Task AddNewMachine()
    {
        var newMachine = new MachineDto
        {
            Id = Guid.NewGuid().ToString(),
            Name = "New Machine",
            Status = MachineStatus.Offline,
            LastUpdated = DateTime.UtcNow
        };
        
        await MachineService.AddMachineAsync(new Machine
        {
            Id = newMachine.Id,
            Name = newMachine.Name,
            Status = newMachine.Status,
            LastUpdated = newMachine.LastUpdated
        });
        
        await OnInitializedAsync();
    }
    private string GetPercentage(Func<MachineDto, bool> predicate)
    {
        if (machines == null || !machines.Any())
            return "0";
        
        return Math.Round((double)machines.Count(predicate) / machines.Count * 100, 1).ToString("0.#");
    }
}